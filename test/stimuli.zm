/******************************************************************************\
FILE:           stimuli.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Defines the formats of item table(s) and provides the actual content of
the item table(s) i.e. stimulus information.


HISTORY:
2012-07-09 TV   Created.

\******************************************************************************/

plugin zep_file;

// Symbolic definition of item type.
enum ItemType
{
    SIMPLE,                     // simple
    COMPLEX,                    // complex
    HIGHFREQ,                   // high freq
    LOWFREQ,                    // low freq
    LITERAL,                    // literal
    FIGURATIVE                  // figurative 
}


// Item table record.
// This script will interprete the labels field as follows: for each subtrial
// the segment played runs from the offset of the previous segment until the
// offset of the interval given by the current label.
record TestItem
{
    int         id;             // item 
    string      seg1;
    string      seg2;
    string      seg3;
    string      seg4;
    string      seg5;
    string      seg6;
    string      seg7;
    string      seg8;
    string      seg9;
    string      question;       // control question/statement
    bool        qanswer;        // correct statement/answer
    string      fname_audio;    // audio file name
    string      fname_label;    // label file name 
    ItemType    type;           // item type
    int         tiernum;        // tier number to select from labelling file
    string      labels;         // segment end labels separated by slashes
}


// Record providing labelling information on the sound file. For each sound
// file there a Praat TextGrid text file has been created and converted to
// CSV format using using perl script textgrid2csv.pl. Note, it is assumed the
// labels in the labelling files come in chronological order (for each tier).
// The target tier used in this experiment script must be an interval tier.
record LabelInfo
{
    string      basename;       // base name of sound file / text grid file
    int         tiernum;        // tier number (0 based)
    string      tiername;       // tier name
    real        begin;          // interval begin time (or point time)
    real        end;            // interval end time (or -1)
    string      label;          // label text
}


TestItem[..] prac_items;
TestItem[..] test_items;


// Provides the csv file names

string practice_file_name()
{
    string name = "practice_items.csv";
    println("practice_items reading");
    return name;
}

string test_file_name()
{
    string name = "test_items.csv";
    println("test_items reading");
    return name;
}



int check_files(TestItem[] target, string filename)
{
    println("Checking existance of stimuli files for " + filename);

    int status = OK;

    int index = 0;
    while(index < target.size)
    {
        string audio = stimuli_dir() + "sounds/" + 
            target[index].fname_audio;
        if( !file_okay(audio)) status = ERROR;

        string label = stimuli_dir() + "sounds/" + 
            target[index].fname_label;
        if( !file_okay(label)) status = ERROR;
        
        index++;
    }

    return status;
}

// Checks if a file is both existent and readable
bool file_okay(string filepath)
{
    bool okay = file_exists(filepath) && file_readable(filepath);
    if(!okay)
        println("Problems with " + filepath);


    return okay;
}

int load_test_stimuli()
{
    int status = OK;
    if( read_csv(test_items, test_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( check_files(test_items, test_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    return status;
}

int load_practice_stimuli()
{
    int status = OK;
    if( read_csv(prac_items, practice_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( check_files(prac_items, practice_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    return status;
}

// loads in csv into the specified target
int read_csv(TestItem[] target, string source)
{
    int err = target.load(stimuli_dir() + source,
    true,           // if true, file contains a header row
    0);             // number of lines to skip before header and data
    if (err != OK) {
        println("Trouble loading from " + source);
        return err;         
    }

    return OK;
     // Load data into test_items table.
}

int load_stimuli()
{
    int status = OK;
    if( read_csv(prac_items, practice_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( check_files(prac_items, practice_file_name()) != OK) {
         status = ERROR;
         return status;
    }
    if( read_csv(test_items, test_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    if( check_files(test_items, test_file_name()) != OK) {
        status = ERROR;
        return status;
    }
    return status;
}
